package util.random;

/*		 
 * Copyright (C) 2002-2014 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU Lesser General Public License as published by the Free
 *  Software Foundation; either version 3 of the License, or (at your option)
 *  any later version.
 *
 *  This library is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 *  for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses/>.
 */


/** 
 * Utility static-method container class.
 * 
 * Subset of Util class from DSI utilities and subset of 
 * HashCommon class from DSI fastutil, with some modifications.
 * 
 * @author Sebastiano Vigna
 * @author Josï¿½ Barranquero Tolosa
 */

public final class RandomizerUtils {
	
	public static final int[] PRIME_SEEDS = {
		15485863, 	3311117, 	586627, 	7225709, 	1608823, 
		664621, 	15527, 		20161, 		350663, 	8689,
		11689, 		14163587, 	2390911, 	33191, 		52147, 
		203023, 	7253, 		10061, 		14479, 		19937,
		73553, 		24151, 		5869,  		117017, 	21277,
		113683, 	5639, 		105769,		28547,		54983,
		// New primes added (19-Oct-2017)
		27407,		37589,		76367,		132527, 	164837,
		217559,		281717, 	301997,		355007, 	402137, 
		7331,		9341,		40151,		78977,		4939169,
		8917871,	13963331,	5282999,	296909,		5211539
	};

	private RandomizerUtils() {}

	private static final XorShift128PlusPRNG seedUniquifier = 
		new XorShift128PlusPRNG( System.nanoTime() );	

	/** 
	 * Returns a random seed generated by taking the output of a 
	 * {@link XorShift128PlusPRNG} 
	 * (seeded at startup with {@link System#nanoTime()}) 
	 * and xoring it with {@link System#nanoTime()}.
	 * 
	 * @return A reasonably good random seed. 
	 */
	public static final long generateRandomSeed() {
		final long x;
		synchronized( seedUniquifier ) {
			x = seedUniquifier.nextLong();
		}
		return x ^ System.nanoTime();
	}

	/** 
	 * Returns a random seed generated by {@link #randomSeed()} 
	 * under the form of an array of eight bytes.
	 * 
	 * @return A reasonably good random seed.
	 */
	public static final byte[] generateRandomSeedBytes() {
		final long seed = RandomizerUtils.generateRandomSeed();
		final byte[] s = new byte[ 8 ];
		for( int i = Long.SIZE / Byte.SIZE; i-- != 0; ) {
			s[ i ] = (byte)( seed >>> i );
		}
		return s;
	}
	
	/** 
	 * Avalanches the bits of an integer by applying the finalisation step of MurmurHash3.
	 * 
	 * <p>This function implements the finalisation step of Austin Appleby's 
	 * <a href="http://sites.google.com/site/murmurhash/">MurmurHash3</a>.
	 * Its purpose is to avalanche the bits of the argument to within 0.25% bias. 
	 * It is used, among other things, to scramble quickly (but deeply) the hash
	 * values returned by {@link Object#hashCode()}.
	 * 
	 * @param x an integer.
	 * @return a hash value with good avalanching properties.
	 */	
	public static final int computeMurmurHash3( int x ) {
		x ^= x >>> 16;
		x *= 0x85ebca6b;
		x ^= x >>> 13;
		x *= 0xc2b2ae35;
		x ^= x >>> 16;
		return x;
	}

	/** 
	 * Avalanches the bits of a long integer by applying the finalisation step of MurmurHash3.
	 * 
	 * <p>This function implements the finalisation step of Austin Appleby's 
	 * <a href="http://sites.google.com/site/murmurhash/">MurmurHash3</a>.
	 * Its purpose is to avalanche the bits of the argument to within 0.25% bias. 
	 * It is used, among other things, to scramble quickly (but deeply) the hash
	 * values returned by {@link Object#hashCode()}.
	 * 
	 * @param x a long integer.
	 * @return a hash value with good avalanching properties.
	 */	
	public static final long computeMurmurHash3( long x ) {
		x ^= x >>> 33;
		x *= 0xff51afd7ed558ccdL;
		x ^= x >>> 33;
		x *= 0xc4ceb9fe1a85ec53L;
		x ^= x >>> 33;
		return x;
	}
	
	public static final double computeNormal(
			final double mean, final double stdev, Randomizer r) {
		
		return ( ( r.nextGaussian() * stdev ) + mean );
	}
	
	public static final double computeBinomial( 
			final double p, final double n, Randomizer r) {
		
		// Reverse probability if (1 -p) > p
		if (p > 0.5) return ( n - computeBinomial((1 - p), n, r) );
		
		// Check that probability is ok
		assert(0 < p && p < 1);
		
		// Pre-compute mean
		final double mean = n * p;

		// Approximate with a Normal Distribution
		if ( mean > 30 ) return computeNormal(mean, mean * (1 - p), r);
			
		// Approximate with a Geometric Distribution
		else return computeGeometricApproxOfBinomial(p, n, r);
	}

	public static final double computeGeometricApproxOfBinomial(
			final double p, final double n, Randomizer r) {
		
		double index = 0;
		double successes = 0;
		final double denominator = Math.log(1 - p);
		for(;;) {
			index += Math.ceil( Math.log( r.nextDouble() ) / denominator );
			if (index >= n) break; 
			successes++;
		};
		return successes;
	}
	
	/**
	 * Compute number of fails until first success (Geometric Distribution)
	 * 
	 * CDF: P(X<=k) = 1-(1-p)^(k+1) 
	 * n ~ ceil( ln(unif) / ln(1-p) )
	 *
	 * http://books.google.es/books?id=ERSSDBDcYOIC&pg=PA189
	 * 
	 * http://math.stackexchange.com/questions/485448/
	 * prove-the-way-to-generate-geometrically-distributed-random-numbers
	 * 
	 * @param p Probability of Bernoulli trials
	 * @param r Pseudo-Random Number Generator (PRNG)
	 * 
	 * @return Number of fails until first success
	 */
	public static final double computeGeometricFails( 
			final double p, Randomizer r) {
		
		return Math.ceil( Math.log(r.nextDouble()) / Math.log(1 - p) );
	}
}
